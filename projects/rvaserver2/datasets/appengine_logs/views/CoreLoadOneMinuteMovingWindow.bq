SELECT
  interval_stats.one_minute_prior_interval_group as one_minute_prior_interval_group,
  version_ranks.viewer_version as noisiest_viewer,
  interval_stats.pending_time as pending_time,
  interval_stats.instances as instances,
  interval_stats.latest_time_in_interval as latest_time_in_interval,
  interval_stats.gigacycles as gigacycles,
  interval_stats.latency as latency,
  interval_stats.display_count as display_count,
  interval_stats.request_count as request_count
FROM (
  SELECT
    FLOOR((CURRENT_TIMESTAMP() - metadata.timestamp) / 1000000 / 60) one_minute_prior_interval_group,
    SUM(if (protoPayload.pendingTime IS NULL,
        0,
        FLOAT(RTRIM(protoPayload.pendingTime, "s")))) AS pending_time,
    MAX(metadata.timestamp) AS latest_time_in_interval,
    SUM(protoPayload.megacycles) / 1000 AS gigacycles,
    SUM(float(rtrim(protoPayload.latency, "s"))) AS latency,
    COUNT (DISTINCT protoPayload.instanceId) AS instances,
    COUNT (DISTINCT REGEXP_EXTRACT(protoPayload.resource,r'\/v2\/viewer\/display\/([A-Za-z0-9-]+)')) AS display_count,
    COUNT(*) AS request_count
  FROM
    TABLE_DATE_RANGE(appengine_logs.appengine_googleapis_com_request_log_, CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP())
  WHERE
    CURRENT_TIMESTAMP() - metadata.timestamp < 3600000000
  GROUP BY
    one_minute_prior_interval_group
  ORDER BY
    one_minute_prior_interval_group ) AS interval_stats
LEFT JOIN (
select * from (
  SELECT
    FLOOR((CURRENT_TIMESTAMP() - metadata.timestamp) / 1000000 / 60) one_minute_prior_interval_group,
    REGEXP_EXTRACT(protoPayload.resource,r'&vv=([A-Za-z0-9-]+)') AS viewer_version,
    COUNT(*) AS version_count,
    RANK() OVER (PARTITION BY one_minute_prior_interval_group ORDER BY version_count DESC) AS version_rank
  FROM
    TABLE_DATE_RANGE(appengine_logs.appengine_googleapis_com_request_log_, CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP())
  WHERE
    CURRENT_TIMESTAMP() - metadata.timestamp < 3600000000
    AND SUBSTR(protoPayload.resource, 0, 18) = "/v2/viewer/display"
  GROUP BY
    one_minute_prior_interval_group,
    viewer_version) where version_rank = 1) AS version_ranks
ON
  version_ranks.one_minute_prior_interval_group = interval_stats.one_minute_prior_interval_group
